{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport RegistrationView from './RegistrationView.vue';\nexport default {\n  name: 'HomeView',\n  data() {\n    return {\n      newPost: '',\n      userName: this.userName = localStorage.getItem('userName'),\n      posts: [],\n      emptyPost: true,\n      newComment: ''\n      // comments: []\n    };\n  },\n\n  methods: {\n    sendPost() {\n      if (this.newPost) {\n        this.posts.unshift({\n          id: new Date().getTime(),\n          user: this.userName,\n          text: this.newPost,\n          showComments: false,\n          comments: [],\n          usersLiked: [],\n          usersDisliked: []\n        });\n        localStorage.setItem('posts', JSON.stringify(this.posts));\n        this.newPost = '';\n        this.emptyPost = false;\n      } else {\n        alert('Вы не ввели текст');\n      }\n    },\n    like(id) {\n      this.posts.map(post => {\n        if (post.id === id) {\n          if (post.usersLiked.includes(this.userName)) {\n            // console.log('del');\n            post.usersLiked = post.usersLiked.filter(user => user != this.userName);\n          } else {\n            // console.log('add')\n            post.usersLiked.push(this.userName);\n            post.usersDisliked = post.usersDisliked.filter(user => user != this.userName);\n          }\n          // post.usersLiked.map((user) => {\n          //     console.log(user);\n          //     if(user === this.userName) {\n          //         post.likes -= 1\n          //         delete post.usersLiked(this.userName)\n          //     } else {\n          //         post.likes += 1\n          //         post.usersLiked.push(this.userName)\n          //     }\n          // })\n          // post.likes += 1\n          // post.usersLiked.push(this.userName)\n          // if(this.userName in post.usersLiked) {\n          //     delete post.usersLiked(this.userName)\n          //     console.log('del');\n          // } else {\n          //     post.usersLiked.push(this.userName)\n          //     console.log('add');\n          // }\n          // if(!post.usersLiked){\n          //     post.usersLiked.push(this.userName)\n          //     console.log('add');\n          // } else {\n          //     for (let user of post.usersLiked) {\n          //         console.log('for');\n          //         if(user === this.userName){\n          //             delete post.usersLiked(this.userName)\n          //             console.log('del');\n          //         } else {\n          //             post.usersLiked.push(this.userName)\n          //             console.log('add');\n          //         }\n          //     }\n          // }\n          localStorage.setItem('posts', JSON.stringify(this.posts));\n        }\n      });\n    },\n    dislike(id) {\n      this.posts.map(post => {\n        if (post.id === id) {\n          if (post.usersDisliked.includes(this.userName)) {\n            // console.log('del');\n            post.usersDisliked = post.usersDisliked.filter(user => user != this.userName);\n          } else {\n            // console.log('add')\n            post.usersDisliked.push(this.userName);\n            post.usersLiked = post.usersLiked.filter(user => user != this.userName);\n          }\n        }\n      });\n    },\n    showCom(id) {\n      this.posts.map(post => {\n        if (post.id === id) {\n          post.showComments = !post.showComments;\n          localStorage.setItem('posts', JSON.stringify(this.posts));\n        } else {\n          post.showComments = false;\n        }\n      });\n    },\n    sendComment(id) {\n      if (this.newComment !== '') {\n        this.posts.map(post => {\n          if (post.id === id) {\n            post.comments.unshift({\n              user: this.userName,\n              text: this.newComment\n            });\n            localStorage.setItem('posts', JSON.stringify(this.posts));\n          }\n        });\n        this.newComment = '';\n      } else {\n        alert('Введите текст комментария');\n      }\n    }\n  },\n  components: {\n    RegistrationView\n  },\n  created() {\n    if (localStorage.getItem('posts')) {\n      this.posts = JSON.parse(localStorage.getItem('posts'));\n      this.emptyPost = false;\n    } else {\n      this.emptyPost = true;\n    }\n    // this.posts = this.posts.reverse()\n  }\n  // computed() {\n  //     this.posts = this.posts.reverse()\n  // }\n};","map":{"version":3,"names":["RegistrationView","name","data","newPost","userName","localStorage","getItem","posts","emptyPost","newComment","methods","sendPost","unshift","id","Date","getTime","user","text","showComments","comments","usersLiked","usersDisliked","setItem","JSON","stringify","alert","like","map","post","includes","filter","push","dislike","showCom","sendComment","components","created","parse"],"sources":["D:\\code\\react\\synergy\\final-project\\front\\src\\components\\HomeView.vue"],"sourcesContent":["<template>\r\n    <div v-if=\"userName\">\r\n        <div class=\"new-post\">\r\n            <label>Новая запись</label>\r\n            <input v-model=\"newPost\" placeholder=\"Введите текст\" v-on:keyup.enter=\"sendPost\"/>\r\n            <button @click=\"sendPost\">Опубликовать</button>\r\n        </div>\r\n        <div v-for=\"post in posts\" :key=\"post.id\">\r\n            <section class=\"post\">\r\n                <span>{{ post.user }}: {{ post.text }}</span>\r\n                <div>\r\n                    <!-- Лайков: {{ post.usersLiked.length }} -->\r\n                    <button @click=\"like(post.id)\" class=\"btn btn-3 btn-sep icon-heart\">Лайков: {{ post.usersLiked.length }}</button>\r\n                    Дизлайков: {{ post.usersDisliked.length }}\r\n                    <button @click=\"dislike(post.id)\">-</button>\r\n                </div>\r\n                <div>\r\n                    <button @click=\"showCom(post.id)\">Комментарии</button>\r\n                    <div v-show=\"post.showComments\">\r\n                        <div>\r\n                            <label>Новый комментарий</label>\r\n                            <input v-model=\"newComment\" placeholder=\"Введите текст\" v-on:keyup.enter=\"sendComment(post.id)\"/>\r\n                            <button @click=\"sendComment(post.id)\">Опубликовать</button>\r\n                         </div>\r\n                         <div v-for=\"comment in post.comments\" :key=\"comment.user\">\r\n                            {{ comment.user }}: {{ comment.text }}\r\n                         </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n        <div v-show=\"emptyPost\" class=\"empty\">\r\n            Постов нет\r\n        </div>\r\n    </div>\r\n    <div v-else>\r\n        <RegistrationView/>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport RegistrationView from './RegistrationView.vue';\r\n\r\nexport default {\r\n    name: 'HomeView',\r\n    data() {\r\n        return {\r\n            newPost: '',\r\n            userName: this.userName = localStorage.getItem('userName'),\r\n            posts: [],\r\n            emptyPost: true,\r\n            newComment: '',\r\n            // comments: []\r\n        }\r\n    },\r\n    methods: {\r\n        sendPost() {\r\n            if (this.newPost) {\r\n                this.posts.unshift({id: new Date().getTime(), user: this.userName, text: this.newPost, showComments: false, comments: [], usersLiked: [], usersDisliked: []})\r\n                localStorage.setItem('posts', JSON.stringify(this.posts))\r\n                this.newPost = ''\r\n                this.emptyPost = false\r\n            } else {\r\n                alert('Вы не ввели текст')\r\n            }\r\n        },\r\n        like(id) {\r\n            this.posts.map((post) => {\r\n                if(post.id === id){\r\n                    if(post.usersLiked.includes(this.userName)) {\r\n                        // console.log('del');\r\n                        post.usersLiked = post.usersLiked.filter((user) => user != this.userName)\r\n                    } else {\r\n                        // console.log('add')\r\n                        post.usersLiked.push(this.userName)\r\n                        post.usersDisliked = post.usersDisliked.filter((user) => user != this.userName)\r\n                    }\r\n                    // post.usersLiked.map((user) => {\r\n                    //     console.log(user);\r\n                    //     if(user === this.userName) {\r\n                    //         post.likes -= 1\r\n                    //         delete post.usersLiked(this.userName)\r\n                    //     } else {\r\n                    //         post.likes += 1\r\n                    //         post.usersLiked.push(this.userName)\r\n                    //     }\r\n                    // })\r\n                    // post.likes += 1\r\n                    // post.usersLiked.push(this.userName)\r\n                    // if(this.userName in post.usersLiked) {\r\n                    //     delete post.usersLiked(this.userName)\r\n                    //     console.log('del');\r\n                    // } else {\r\n                    //     post.usersLiked.push(this.userName)\r\n                    //     console.log('add');\r\n                    // }\r\n                    // if(!post.usersLiked){\r\n                    //     post.usersLiked.push(this.userName)\r\n                    //     console.log('add');\r\n                    // } else {\r\n                    //     for (let user of post.usersLiked) {\r\n                    //         console.log('for');\r\n                    //         if(user === this.userName){\r\n                    //             delete post.usersLiked(this.userName)\r\n                    //             console.log('del');\r\n                    //         } else {\r\n                    //             post.usersLiked.push(this.userName)\r\n                    //             console.log('add');\r\n                    //         }\r\n                    //     }\r\n                    // }\r\n                    localStorage.setItem('posts', JSON.stringify(this.posts))\r\n                }\r\n            });\r\n        },\r\n        dislike(id) {\r\n            this.posts.map((post) => {\r\n                if(post.id === id){\r\n                    if(post.usersDisliked.includes(this.userName)) {\r\n                        // console.log('del');\r\n                        post.usersDisliked = post.usersDisliked.filter((user) => user != this.userName)\r\n                    } else {\r\n                        // console.log('add')\r\n                        post.usersDisliked.push(this.userName)\r\n                        post.usersLiked = post.usersLiked.filter((user) => user != this.userName)\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        showCom(id) {\r\n            this.posts.map((post) => {\r\n                if(post.id === id){\r\n                    post.showComments = !post.showComments\r\n                    localStorage.setItem('posts', JSON.stringify(this.posts))\r\n                } else {\r\n                    post.showComments = false\r\n                }\r\n            })\r\n        },\r\n        sendComment(id){\r\n            if(this.newComment !== '') {\r\n                this.posts.map((post) => {\r\n                    if(post.id === id){\r\n                        post.comments.unshift({user: this.userName, text: this.newComment})\r\n                        localStorage.setItem('posts', JSON.stringify(this.posts))\r\n                    }\r\n                })\r\n                this.newComment = ''\r\n            } else {\r\n                alert('Введите текст комментария')\r\n            }\r\n        }\r\n    },\r\n    components: {\r\n        RegistrationView,\r\n    }, \r\n    created() {\r\n        if(localStorage.getItem('posts')){\r\n            this.posts = JSON.parse(localStorage.getItem('posts'))\r\n            this.emptyPost = false\r\n        } else {\r\n            this.emptyPost = true\r\n        }\r\n        // this.posts = this.posts.reverse()\r\n    },\r\n    // computed() {\r\n    //     this.posts = this.posts.reverse()\r\n    // }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.post {\r\n    width: 100%;\r\n    background-color: #A1F0E5;\r\n    margin-bottom: 20px;\r\n    border-radius: 10px;\r\n}\r\n.post > span {\r\n    font-size: 20px;\r\n}\r\n.new-post {\r\n    margin-bottom: 15px;\r\n}\r\n.btn {\r\n  border: none;\r\n  font-family: 'Lato';\r\n  font-size: inherit;\r\n  color: inherit;\r\n  background: none;\r\n  cursor: pointer;\r\n  padding: 25px 80px;\r\n  display: inline-block;\r\n  margin: 15px 30px;\r\n  text-transform: uppercase;\r\n  letter-spacing: 1px;\r\n  font-weight: 700;\r\n  outline: none;\r\n  position: relative;\r\n  -webkit-transition: all 0.3s;\r\n  -moz-transition: all 0.3s;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.btn:after {\r\n  content: '';\r\n  position: absolute;\r\n  z-index: -1;\r\n  -webkit-transition: all 0.3s;\r\n  -moz-transition: all 0.3s;\r\n  transition: all 0.3s;\r\n}\r\n\r\n/* Pseudo elements for icons */\r\n.btn:before {\r\n  font-family: 'FontAwesome';\r\n  speak: none;\r\n  font-style: normal;\r\n  font-weight: normal;\r\n  font-variant: normal;\r\n  text-transform: none;\r\n  line-height: 1;\r\n  position: relative;\r\n  -webkit-font-smoothing: antialiased;\r\n}\r\n\r\n\r\n/* Icon separator */\r\n.btn-sep {\r\n  /* padding: 25px 60px 25px 120px; */\r\n}\r\n\r\n.btn-sep:before {\r\n  background: rgba(0,0,0,0.15);\r\n}\r\n\r\n/* Button 1 */\r\n.btn-1 {\r\n  background: #3498db;\r\n  color: #fff;\r\n}\r\n\r\n.btn-1:hover {\r\n  background: #2980b9;\r\n}\r\n\r\n.btn-1:active {\r\n  background: #2980b9;\r\n  top: 2px;\r\n}\r\n\r\n.btn-1:before {\r\n  position: absolute;\r\n  height: 100%;\r\n  left: 0;\r\n  top: 0;\r\n  line-height: 3;\r\n  font-size: 140%;\r\n  width: 60px;\r\n}\r\n\r\n/* Button 2 */\r\n.btn-2 {\r\n  background: #2ecc71;\r\n  color: #fff;\r\n}\r\n\r\n.btn-2:hover {\r\n  background: #27ae60;\r\n}\r\n\r\n.btn-2:active {\r\n  background: #27ae60;\r\n  top: 2px;\r\n}\r\n\r\n.btn-2:before {\r\n  position: absolute;\r\n  height: 100%;\r\n  left: 0;\r\n  top: 0;\r\n  line-height: 3;\r\n  font-size: 140%;\r\n  width: 60px;\r\n}\r\n\r\n/* Button 3 */\r\n.btn-3 {\r\n  background: #e74c3c;\r\n  color: #fff;\r\n}\r\n\r\n.btn-3:hover {\r\n  background: #c0392b;\r\n}\r\n\r\n.btn-3:active {\r\n  background: #c0392b;\r\n  top: 2px;\r\n}\r\n\r\n.btn-3:before {\r\n  position: absolute;\r\n  height: 100%;\r\n  left: 0;\r\n  top: 0;\r\n  line-height: 3;\r\n  font-size: 140%;\r\n  width: 60px;\r\n}\r\n\r\n/* Button 3 */\r\n.btn-4 {\r\n  background: #34495e;\r\n  color: #fff;\r\n}\r\n\r\n.btn-4:hover {\r\n  background: #2c3e50;\r\n}\r\n\r\n.btn-4:active {\r\n  background: #2c3e50;\r\n  top: 2px;\r\n}\r\n\r\n.btn-4:before {\r\n  position: absolute;\r\n  height: 100%;\r\n  left: 0;\r\n  top: 0;\r\n  line-height: 3;\r\n  font-size: 140%;\r\n  width: 60px;\r\n}\r\n\r\n/* Icons */\r\n\r\n.icon-cart:before {\r\n  content: \"\\f07a\";\r\n}\r\n\r\n.icon-heart:before {\r\n  content: \"\\f55a\";\r\n}\r\n\r\n.icon-info:before {\r\n  content: \"\\f05a\";\r\n}\r\n\r\n.icon-send:before {\r\n  content: \"\\f1d8\";\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}