{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, vShow as _vShow, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-b6e8eb58\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"Новая запись\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"post\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", null, \"Новый комментарий\", -1 /* HOISTED */));\nconst _hoisted_8 = [\"onKeyup\"];\nconst _hoisted_9 = [\"onClick\"];\nconst _hoisted_10 = {\n  class: \"empty\"\n};\nconst _hoisted_11 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_RegistrationView = _resolveComponent(\"RegistrationView\");\n  return $data.userName ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", null, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newPost = $event),\n    placeholder: \"Введите текст\",\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.sendPost && $options.sendPost(...args), [\"enter\"]))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $data.newPost]]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.sendPost && $options.sendPost(...args))\n  }, \"Опубликовать\")]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.posts, post => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: post.id\n    }, [_createElementVNode(\"section\", _hoisted_3, [_createTextVNode(_toDisplayString(post.user) + \": \" + _toDisplayString(post.text) + \" \", 1 /* TEXT */), _createElementVNode(\"div\", null, [_createTextVNode(\" Лайков: \" + _toDisplayString(post.usersLiked.length) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.like(post.id)\n    }, \"+\", 8 /* PROPS */, _hoisted_4), _createTextVNode(\" Дизлайков: \" + _toDisplayString(post.usersDisliked.length) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.dislike(post.id)\n    }, \"-\", 8 /* PROPS */, _hoisted_5)]), _createElementVNode(\"div\", null, [_createElementVNode(\"button\", {\n      onClick: $event => $options.showCom(post.id)\n    }, \"Комментарии\", 8 /* PROPS */, _hoisted_6), _withDirectives(_createElementVNode(\"div\", null, [_createElementVNode(\"div\", null, [_hoisted_7, _withDirectives(_createElementVNode(\"input\", {\n      \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.newComment = $event),\n      placeholder: \"Введите текст\",\n      onKeyup: _withKeys($event => $options.sendComment(post.id), [\"enter\"])\n    }, null, 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_8), [[_vModelText, $data.newComment]]), _createElementVNode(\"button\", {\n      onClick: $event => $options.sendComment(post.id)\n    }, \"Опубликовать\", 8 /* PROPS */, _hoisted_9)]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(post.comments, comment => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: comment.user\n      }, _toDisplayString(comment.user) + \": \" + _toDisplayString(comment.text), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vShow, post.showComments]])])])]);\n  }), 128 /* KEYED_FRAGMENT */)), _withDirectives(_createElementVNode(\"div\", _hoisted_10, \" Постов нет \", 512 /* NEED_PATCH */), [[_vShow, $data.emptyPost]])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [_createVNode(_component_RegistrationView)]));\n}","map":{"version":3,"names":["_createElementVNode","class","$data","userName","_createElementBlock","_hoisted_1","_hoisted_2","newPost","$event","placeholder","onKeyup","_cache","_withKeys","args","$options","sendPost","onClick","_Fragment","_renderList","posts","post","key","id","_hoisted_3","user","_toDisplayString","text","usersLiked","length","like","_hoisted_4","usersDisliked","dislike","_hoisted_5","showCom","_hoisted_6","_hoisted_7","newComment","sendComment","_hoisted_9","comments","comment","showComments","_hoisted_10","emptyPost","_hoisted_11","_createVNode","_component_RegistrationView"],"sources":["D:\\code\\react\\synergy\\final-project\\front\\src\\components\\HomeView.vue"],"sourcesContent":["<template>\r\n    <div v-if=\"userName\">\r\n        <div>\r\n            <label>Новая запись</label>\r\n            <input v-model=\"newPost\" placeholder=\"Введите текст\" v-on:keyup.enter=\"sendPost\"/>\r\n            <button @click=\"sendPost\">Опубликовать</button>\r\n        </div>\r\n        <div v-for=\"post in posts\" :key=\"post.id\">\r\n            <section class=\"post\">\r\n                {{ post.user }}: {{ post.text }}\r\n                <div>\r\n                    Лайков: {{ post.usersLiked.length }}\r\n                    <button @click=\"like(post.id)\">+</button>\r\n                    Дизлайков: {{ post.usersDisliked.length }}\r\n                    <button @click=\"dislike(post.id)\">-</button>\r\n                </div>\r\n                <div>\r\n                    <button @click=\"showCom(post.id)\">Комментарии</button>\r\n                    <div v-show=\"post.showComments\">\r\n                        <div>\r\n                            <label>Новый комментарий</label>\r\n                            <input v-model=\"newComment\" placeholder=\"Введите текст\" v-on:keyup.enter=\"sendComment(post.id)\"/>\r\n                            <button @click=\"sendComment(post.id)\">Опубликовать</button>\r\n                         </div>\r\n                         <div v-for=\"comment in post.comments\" :key=\"comment.user\">\r\n                            {{ comment.user }}: {{ comment.text }}\r\n                         </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n        <div v-show=\"emptyPost\" class=\"empty\">\r\n            Постов нет\r\n        </div>\r\n    </div>\r\n    <div v-else>\r\n        <RegistrationView/>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport RegistrationView from './RegistrationView.vue';\r\n\r\nexport default {\r\n    name: 'HomeView',\r\n    data() {\r\n        return {\r\n            newPost: '',\r\n            userName: this.userName = localStorage.getItem('userName'),\r\n            posts: [],\r\n            emptyPost: true,\r\n            newComment: '',\r\n            // comments: []\r\n        }\r\n    },\r\n    methods: {\r\n        sendPost() {\r\n            this.posts.unshift({id: new Date().getTime(), user: this.userName, text: this.newPost, showComments: false, comments: [], usersLiked: [], usersDisliked: []})\r\n            localStorage.setItem('posts', JSON.stringify(this.posts))\r\n            this.newPost = ''\r\n            this.emptyPost = false\r\n        },\r\n        like(id) {\r\n            this.posts.map((post) => {\r\n                if(post.id === id){\r\n                    if(post.usersLiked.includes(this.userName)) {\r\n                        // console.log('del');\r\n                        post.usersLiked = post.usersLiked.filter((user) => user != this.userName)\r\n                    } else {\r\n                        // console.log('add')\r\n                        post.usersLiked.push(this.userName)\r\n                        post.usersDisliked = post.usersDisliked.filter((user) => user != this.userName)\r\n                    }\r\n                    // post.usersLiked.map((user) => {\r\n                    //     console.log(user);\r\n                    //     if(user === this.userName) {\r\n                    //         post.likes -= 1\r\n                    //         delete post.usersLiked(this.userName)\r\n                    //     } else {\r\n                    //         post.likes += 1\r\n                    //         post.usersLiked.push(this.userName)\r\n                    //     }\r\n                    // })\r\n                    // post.likes += 1\r\n                    // post.usersLiked.push(this.userName)\r\n                    // if(this.userName in post.usersLiked) {\r\n                    //     delete post.usersLiked(this.userName)\r\n                    //     console.log('del');\r\n                    // } else {\r\n                    //     post.usersLiked.push(this.userName)\r\n                    //     console.log('add');\r\n                    // }\r\n                    // if(!post.usersLiked){\r\n                    //     post.usersLiked.push(this.userName)\r\n                    //     console.log('add');\r\n                    // } else {\r\n                    //     for (let user of post.usersLiked) {\r\n                    //         console.log('for');\r\n                    //         if(user === this.userName){\r\n                    //             delete post.usersLiked(this.userName)\r\n                    //             console.log('del');\r\n                    //         } else {\r\n                    //             post.usersLiked.push(this.userName)\r\n                    //             console.log('add');\r\n                    //         }\r\n                    //     }\r\n                    // }\r\n                    localStorage.setItem('posts', JSON.stringify(this.posts))\r\n                }\r\n            });\r\n        },\r\n        dislike(id) {\r\n            this.posts.map((post) => {\r\n                if(post.id === id){\r\n                    if(post.usersDisliked.includes(this.userName)) {\r\n                        // console.log('del');\r\n                        post.usersDisliked = post.usersDisliked.filter((user) => user != this.userName)\r\n                    } else {\r\n                        // console.log('add')\r\n                        post.usersDisliked.push(this.userName)\r\n                        post.usersLiked = post.usersLiked.filter((user) => user != this.userName)\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        showCom(id) {\r\n            this.posts.map((post) => {\r\n                if(post.id === id){\r\n                    post.showComments = !post.showComments\r\n                    localStorage.setItem('posts', JSON.stringify(this.posts))\r\n                } else {\r\n                    post.showComments = false\r\n                }\r\n            })\r\n        },\r\n        sendComment(id){\r\n            if(this.newComment !== '') {\r\n                this.posts.map((post) => {\r\n                    if(post.id === id){\r\n                        post.comments.unshift({user: this.userName, text: this.newComment})\r\n                        localStorage.setItem('posts', JSON.stringify(this.posts))\r\n                    }\r\n                })\r\n                this.newComment = ''\r\n            } else {\r\n                alert('Введите текст комментария')\r\n            }\r\n        }\r\n    },\r\n    components: {\r\n        RegistrationView,\r\n    }, \r\n    created() {\r\n        if(localStorage.getItem('posts')){\r\n            this.posts = JSON.parse(localStorage.getItem('posts'))\r\n            this.emptyPost = false\r\n        } else {\r\n            this.emptyPost = true\r\n        }\r\n        // this.posts = this.posts.reverse()\r\n    },\r\n    // computed() {\r\n    //     this.posts = this.posts.reverse()\r\n    // }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.post {\r\n    width: 100%;\r\n    background-color: #A1F0E5;\r\n}\r\n</style>"],"mappings":";;;;;gEAGYA,mBAAA,CAA2B,eAApB,cAAY;;EAKVC,KAAK,EAAC;AAAM;;;;gEAYLD,mBAAA,CAAgC,eAAzB,mBAAiB;;;;EAWpBC,KAAK,EAAC;AAAO;;;;;;SA9B9BC,KAAA,CAAAC,QAAQ,I,cAAnBC,mBAAA,CAiCM,OAAAC,UAAA,GAhCFL,mBAAA,CAIM,cAHFM,UAA2B,E,gBAC3BN,mBAAA,CAAkF;+DAAlEE,KAAA,CAAAK,OAAO,GAAAC,MAAA;IAAEC,WAAW,EAAC,eAAe;IAAMC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,SAAA,KAAAC,IAAA,KAAQC,QAAA,CAAAC,QAAA,IAAAD,QAAA,CAAAC,QAAA,IAAAF,IAAA,CAAQ;iEAA/DX,KAAA,CAAAK,OAAO,E,GACvBP,mBAAA,CAA+C;IAAtCgB,OAAK,EAAAL,MAAA,QAAAA,MAAA,UAAAE,IAAA,KAAEC,QAAA,CAAAC,QAAA,IAAAD,QAAA,CAAAC,QAAA,IAAAF,IAAA,CAAQ;KAAE,cAAY,E,sBAE1CT,mBAAA,CAuBMa,SAAA,QAAAC,WAAA,CAvBchB,KAAA,CAAAiB,KAAK,EAAbC,IAAI;yBAAhBhB,mBAAA,CAuBM;MAvBsBiB,GAAG,EAAED,IAAI,CAACE;QAClCtB,mBAAA,CAqBU,WArBVuB,UAqBU,G,kCApBHH,IAAI,CAACI,IAAI,IAAG,IAAE,GAAAC,gBAAA,CAAGL,IAAI,CAACM,IAAI,IAAG,GAChC,iBAAA1B,mBAAA,CAKM,c,iBALD,WACO,GAAAyB,gBAAA,CAAGL,IAAI,CAACO,UAAU,CAACC,MAAM,IAAG,GACpC,iBAAA5B,mBAAA,CAAyC;MAAhCgB,OAAK,EAAAR,MAAA,IAAEM,QAAA,CAAAe,IAAI,CAACT,IAAI,CAACE,EAAE;OAAG,GAAC,iBAAAQ,UAAA,G,iBAAS,cAC9B,GAAAL,gBAAA,CAAGL,IAAI,CAACW,aAAa,CAACH,MAAM,IAAG,GAC1C,iBAAA5B,mBAAA,CAA4C;MAAnCgB,OAAK,EAAAR,MAAA,IAAEM,QAAA,CAAAkB,OAAO,CAACZ,IAAI,CAACE,EAAE;OAAG,GAAC,iBAAAW,UAAA,E,GAEvCjC,mBAAA,CAYM,cAXFA,mBAAA,CAAsD;MAA7CgB,OAAK,EAAAR,MAAA,IAAEM,QAAA,CAAAoB,OAAO,CAACd,IAAI,CAACE,EAAE;OAAG,aAAW,iBAAAa,UAAA,G,gBAC7CnC,mBAAA,CASM,cARFA,mBAAA,CAIO,cAHHoC,UAAgC,E,gBAChCpC,mBAAA,CAAiG;iEAAjFE,KAAA,CAAAmC,UAAU,GAAA7B,MAAA;MAAEC,WAAW,EAAC,eAAe;MAAMC,OAAK,EAAAE,SAAA,CAAAJ,MAAA,IAAQM,QAAA,CAAAwB,WAAW,CAAClB,IAAI,CAACE,EAAE;yEAA7EpB,KAAA,CAAAmC,UAAU,E,GAC1BrC,mBAAA,CAA2D;MAAlDgB,OAAK,EAAAR,MAAA,IAAEM,QAAA,CAAAwB,WAAW,CAAClB,IAAI,CAACE,EAAE;OAAG,cAAY,iBAAAiB,UAAA,E,sBAErDnC,mBAAA,CAEMa,SAAA,QAAAC,WAAA,CAFiBE,IAAI,CAACoB,QAAQ,EAAxBC,OAAO;2BAAnBrC,mBAAA,CAEM;QAFiCiB,GAAG,EAAEoB,OAAO,CAACjB;0BAC9CiB,OAAO,CAACjB,IAAI,IAAG,IAAE,GAAAC,gBAAA,CAAGgB,OAAO,CAACf,IAAI;sEAP9BN,IAAI,CAACsB,YAAY,E;kDAa1C1C,mBAAA,CAEM,OAFN2C,WAEM,EAFgC,cAEtC,0B,SAFazC,KAAA,CAAA0C,SAAS,E,sBAI1BxC,mBAAA,CAEM,OAAAyC,WAAA,GADFC,YAAA,CAAmBC,2BAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}